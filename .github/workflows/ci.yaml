name: CI

on:
  push:
    branches: [master]
    tags: [v*.*.*]
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]

jobs:
  # https://github.community/t/how-to-limit-concurrent-workflow-runs/16844/16
  # We limit it, since our tests are runnig on GPU presets,
  #   if we fire several of them at the same time, it might lead to cluster-scaleup failures
  pre-ci:
    runs-on: ubuntu-latest
    steps:
      - name: 'Wait another CI to complete'
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
          continue-after-seconds: 2400
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')

    strategy:
      matrix:
        base-image:
          - nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04
          - nvidia/cuda:11.2.2-cudnn8-runtime-ubuntu20.04

    env:
      IMAGE_NAME: neuromation/base
      NEURO_STAGING_URL: ${{ secrets.NEURO_STAGING_URL }}
      NEURO_TOKEN: ${{ secrets.NEURO_TOKEN }}

    name: Build, test and publish image
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -U neuro-cli

      - name: Configure environment
        run: |
          source venv/bin/activate
          neuro config login-with-token $NEURO_TOKEN $NEURO_STAGING_URL
          neuro config show

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ github.sha }}
          restore-keys: |
            buildx-cache

      - name: Login DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Get image tags
        id: get-image-type
        run: |
          if [[ ${{ matrix.base-image }} =~ runtime ]]; then
            export BASE_IMAGE_TYPE="runtime";
          elif [[ ${{ matrix.base-image }} =~ devel ]]; then
            export BASE_IMAGE_TYPE="devel";
          fi
          echo "::set-output name=BASE_IMAGE_TYPE::$BASE_IMAGE_TYPE"
          echo "::set-output name=platform_image_tag::neuromation/base:built-$(BASE_IMAGE_TYPE)"

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args:
            - BASE_IMAGE=${{ matrix.base-image }}
          push: false # Would be pushed to Platform first, and if release - to DockerHub
          tags: ${{ steps.get-image-type.outputs.platform_image_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: List pip packages
        run: |
            docker run --tty --rm ${{ steps.get-image-type.outputs.platform_image_tag }} pip list

      - name: Test image
        env:
          BASE_IMAGE_TYPE: ${{ steps.get-image-type.outputs.BASE_IMAGE_TYPE }}
        run: |
            source venv/bin/activate
            make e2e_neuro_push
            make test_dependencies

      - name: Push release
        env:
          BASE_IMAGE_TYPE: ${{ steps.get-image-type.outputs.BASE_IMAGE_TYPE }}
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export TARGET_IMAGE_TAGS="latest-$BASE_IMAGE_TYPE,${GITHUB_REF#refs/tags/}-$BASE_IMAGE_TYPE";
          if [[ $BASE_IMAGE_TYPE == runtime ]]; then
            export TARGET_IMAGE_TAGS="latest,$TARGET_IMAGE_TAGS";
          fi
          make image_deploy
